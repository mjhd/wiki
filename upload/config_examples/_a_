Installing alien
Alien is a tool for converting between various package formats. It currently supports conversion to and from RPM, DEB, Stampede SLP, LSB, Slackware TGZ packages and Solaris PKG files. Download alien with

$ wget -c https://sourceforge.net/projects/alien-pkg-convert/files/release/alien_8.95.tar.xz
and unpack the archive:

$ tar xf alien_8.95.tar.xz
Alien uses Perl so you will need it to compile the source. Install Perl with

# dnf install perl
if it isnâ€™t already installed. Then you can go on and compile the alien source code in the freshly unpacked directory with

# perl Makefile.PL; make; make install
Converting DEB packages to RPM
Once alien is installed using it is simple. To convert a Debian package to RPM format use

# alien --to-rpm file.deb
where file.deb is the DEB package you have downloaded. This will generate a RPM equivalent for that DEB file that you can install with

# rpm -ivh file.rpm















dnf groupinstall "Development Tools" -y
dnf install curl-devel openssl-devel git screen -y
git clone https://github.com/tpruvot/cpuminer-multi.git
cd cpuminer-multi
sh build.sh
./configure CFLAGS="-march=native" --with-crypto --with-curl






openssl genpkey -aes-256-cbc -algorithm RSA -out key.pem
ssh-keygen -y -f key.pem > key.pub

git push origin master/main ## user:pass(TOKEN from _YY_)







dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
dnf install docker
dnf install docker-ce --nobest -y

#export DOCKER_HOST=""


##cd /var/www
###mkdir portainer
##cd portainer
##docker pull portainer/portainer
##mkdir /opt/portainer
##docker run -d -p 9000:9000 --name your_portainer_name --restart always -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer:/data portainer/portainer
##docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent:2.16.0

sudo docker run -d -p 8000:8000 -p 9443:9443 --name porty --restart=always -v /run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.9.3
sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version



sudo dnf install cockpit-file-sharing
sudo mkdir /mnt/storj
lsblk -d -fs /dev/sda3

## sda3  LVM2_member LVM2 001       Fm2Xez-Tme9-aq9C-fYd4-WquT-RVdk-FAQxla

sudo echo "UUID=3dd1a9ca-f1dd-4ae2-a6ba-9ed4b76846f6 /mnt/storj xfs defaults 0 2" >> /etc/fstab
sudo mount -a

## NOT CURRENTLY WORKING ---^













sudo rpm --import https://keys.openpgp.org/vks/v1/by-fingerprint/034F7776EF5E0C613D2F7934D29FBD5F93C0CFC3

sudo dnf config-manager --add-repo https://rpm.librewolf.net

sudo dnf install --refresh librewolf --nobest












## sudo git clone https://github.com/dappnode/DAppNode_Installer.git
## cd DAppNode_Installer
## sudo /usr/local/bin/docker-compose up






















cd /var/www
git clone https://github.com/cytopia/devilbox

cd devilbox
cp env-example .env

sudo /usr/local/bin/docker-compose up

































----------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------










---- SERVER SETUP: ----


cd /tmp
yum install epel-release wget yum-utils firewalld vim
yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm
yum-config-manager --enable remi-php74
wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup
chmod +x mariadb_repo_setup
./mariadb_repo_setup
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum update

rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
yum --enablerepo=elrepo-kernel install kernel-ml
# grub2-set-default 0 # ??--> should this be before or after mkconfig?
grub2-mkconfig
grub2-set-default 0
vim /boot/grub/grub.conf
## SET:  default=0
## :w
yum update

systemctl enable firewalld
systemctl start firewalld

firewall-cmd --permanent --zone=public --add-port 443/tcp
firewall-cmd --permanent --zone=public --add-port 80/tcp
firewall-cmd --permanent --zone=public --add-port 7822/tcp
systemctl restart firewalld

shutdown -r 0



---- LOG BACK IN AFTER SYSTEM RESET ----


yum install nginx haproxy MariaDB-server redis docker-ce elinks php php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json

systemctl stop httpd
systemctl enable nginx haproxy mysql redis php-fpm containerd docker-ce
systemctl start nginx haproxy mysql redis php-fpm containerd docker-ce
systemctl disable httpd
##chkconfig httpd off

yum install docker-compose yum-plugin-ovl


mv /lib/systemd/system/docker.service /tmp
vim /lib/systemd/system/docker.service







---- docker.service contents: ----

[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service
Wants=network-online.target

[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
ExecStart=/usr/bin/dockerd -H unix://
ExecReload=/bin/kill -s HUP $MAINPID
TimeoutSec=0
RestartSec=2
Restart=always

# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
# Both the old, and new location are accepted by systemd 229 and up, so using the old location
# to make them work for either version of systemd.
StartLimitBurst=3

# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
# this option work for either version of systemd.
StartLimitInterval=60s

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Comment TasksMax if your systemd version does not supports it.
# Only systemd 226 and above support this option.
TasksMax=infinity

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target




#------------------------------------------------------------------------------------------------------------------------------


mkdir /etc/docker
vim /etc/docker/daemon.sh



---- docker daemon.sh contents: ----

{
	"storage-driver": "overlay2",
	"storage-opts": [
		"overlay2.override_kernel_check=true"
	]
}


-----------------------------------------------------------------------------------------------------------------------------------







touch temp
while read item
do
	if [ `grep -cim1 "ExecStartPre=" <<< "$item"` -eq 1 ]
	then
		echo \#ExecStartPre=/sbin/modprobe overlay >> temp
	else
		echo $item >> temp
	fi
done < /lib/systemd/system/containerd.service
mv /lib/systemd/system/containerd.service /tmp/containerd.service_bak
mv temp /lib/systemd/system/containerd.service

systemctl daemon-reload
systemctl restart containerd
systemctl restart docker








---- HaProxy config(/etc/haproxy/haproxy.cfg): ----

frontend localhost
   # Only bind on 80 if you also want to listen for connections on 80
   bind *:80
   bind *:443
   option tcplog
   mode tcp
   default_backend localhost

backend localhost
   mode tcp
   balance roundrobin
   #option ssl-hello-chk
   #Add an entry for each of your backend servers and their resolvable hostnames
   server localhost 127.0.0.1:8180 check



---- NginX config(/etc/nginx/nginx.conf): ----

## ONLY CHANGE HTTP SECTION !!!

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

#    server {
#        listen       127.0.0.1:8180 default_server;
#        #listen       [::]:8000 default_server;
#        server_name  _;
#        root         /var/www/nginx_root/default_dir; #/usr/share/nginx/html;

#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;

#        location / {
#        }

#        error_page 404 /404.html;
#            location = /40x.html {
#        }

#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }


--------------------------------------------------------------------------------------------------------------------------------------------






---- default config(/etc/nginx/conf.d/default.conf): ----

server {
        listen        8180;
        #listen       [::]:8000 default_server;
        server_name  209.124.88.98;
        root         /var/www/nginx_root/default_dir; #/usr/share/nginx/html;
        index index.php index.html;

        location / {
                try_files $uri $uri/ /index.php?$query_string;
        }

        location ~ \.php$ {
                fastcgi_index index.php;
                try_files $uri =404;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_pass 127.0.0.1:9000;
        }

        error_page 404 /404.html;
                location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
                location = /50x.html {
        }
}


-------------------------------------------------------------------------------------------------------------------------------------------







---- developmentlab.io config(/etc/nginx/conf.d/developmentlab_io.conf): ----

server {
        listen        8180;
        #listen       [::]:8000 default_server;
        server_name  developmentlab.io;
        root         /var/www/nginx_root/developmentlab_io;
        index index.php index.html;

	location / {
		try_files $uri $uri/ /index.php?$query_string;
	}

	location ~ \.php$ {
		fastcgi_index index.php;
		try_files $uri =404;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_pass 127.0.0.1:9000;
	}

	error_page 404 /404.html;
		location = /40x.html {
	}

	error_page 500 502 503 504 /50x.html;
		location = /50x.html {
	}
}


-------------------------------------------------------------------------------------------------------------------------------------------


mkdir /var/www/nginx_root
mkdir /var/www/nginx_root/default_dir
echo '<?php echo "<h1>Uhhhhhh, wat u doin mate?</h1>"; ?>' > /var/www/nginx_root/default_dir/index.php

mkdir /var/www/nginx_root/developmentlab_io
echo '<h1>DevelomentLab.io</h1>' > /var/www/nginx_root/developmentlab_io/index.html
echo '<?php echo "<h1>DevelopmentLab.io PHP</h1>"; ?>' > /var/www/nginx_root/developmentlab_io/index.php
systemctl restart nginx haproxy


docker volume create portainer_data

??????

docker run -d -p 8000:8000 -p 8190:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

  ## WHICH? --^--v

docker run -d -p 9005:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

?????


















??????????????????????????????????????????????????????????????????????????????




 ###  Q) #1: PROXY FOR ADMIN SECTION ?? -->
 ###  Q) #2: GRAYLOG ?? -->






	echo LC_ALL=en_US.utf-8 >> /etc/environment
	echo LANG=en_US.utf-8 >> /etc/environment


	yum groups mark convert
	yum install elfutils-devel


yum install nmap iftop iptraf glances htop atop netatop-utils bmon nmon mosh vnstat mtr goaccess nethogs darkstat monitorix mytop swaks rsync rrdtool-devel curl curl-devel


amavisd-new clamav clamd clamav-update unzip bzip2 perl perl-DBD-mysql postgrey re2c getmail








	#Let's Encrypt

	mkdir /opt/certbot
	cd /opt/certbot
	wget https://dl.eff.org/certbot-auto
	chmod a+x ./certbot-auto
	./certbot-auto

	cd /usr/local/src
	wget http://dist.modpython.org/dist/mod_python-3.5.0.tgz
	tar xfz mod_python-3.5.0.tgz
	cd mod_python-3.5.0

	./configure
	make
	sed -e 's/(git describe --always)/(git describe --always 2>\/dev\/null)/g' -e 's/`git describe --always`/`git describe --always 2>\/dev\/null`/g' -i $( find . -type f -name Makefile\* -o -name version.sh )
	make install
	echo 'LoadModule python_module modules/mod_python.so' > /etc/httpd/conf.modules.d/10-python.conf









	#Set timezone via php.ini

	touch temp

	while read item
	do
		if [ `grep -cim1 ";date.timezone" <<< "$item"` -eq 1 ]
		then
			echo date.timezone = America/Los_Angeles >> temp
		elif [ `grep -cim1 "max_execution_time =" <<< "$item"` -eq 1 ]
		then
			echo max_execution_time = 240 >> temp
		elif [ `grep -cim1 "log_errors_max_len =" <<< "$item"` -eq 1 ]
		then
			echo log_errors_max_len = 4600 >> temp
		elif [ `grep -cim1 "post_max_size =" <<< "$item"` -eq 1 ]
		then
			echo post_max_size = 2G >> temp
		elif [ `grep -cim1 "upload_max_filesize =" <<< "$item"` -eq 1 ]
		then
			echo upload_max_filesize = 2G >> temp
		elif [ `grep -cim1 "memory_limit =" <<< "$item"` -eq 1 ]
		then
			echo memory_limit = 512M >> temp
		elif [ `grep -cim1 "max_file_uploads =" <<< "$item"` -eq 1 ]
		then
			echo max_file_uploads = 100 >> temp
		else
			echo $item >> temp
		fi
	done < /etc/php.ini
	mv /etc/php.ini /etc/php.ini_bak
	mv temp /etc/php.ini
	chown root:root /etc/php.ini










	yum install openssl



	wget http://olivier.sessink.nl/jailkit/jailkit-2.19.tar.gz
	tar -xvzf jailkit-2.19.tar.gz
	cd jailkit-2.19
	./configure
	make
	make install
	cd ..
	rm -rf jailkit-2.19

	yum install iptables-services failban fail2ban-systemd
	systemctl stop firewalld.service
	systemctl mask firewalld.service

	mv jail.local /etc/fail2ban
	chown root:root /etc/fail2ban/jail.local
	mkdir /var/run/fail2ban
	systemctl enable fail2ban.service
	systemctl start fail2ban.service

	systemctl unmask firewalld
	systemctl start firewalld

	yum install rkhunter










	curl -sS https://getcomposer.org/installer | php
	mv composer.phar /usr/local/bin/composer
	yum install memcached

	mv /etc/sysconfig/memcached /etc/sysconfig/memcached_bak
	touch /etc/sysconfig/memcached

	echo PORT=\"1337\" >> /etc/sysconfig/memcached
	echo USER=\"nowadmin\" >> /etc/sysconfig/memcached
	echo MAXCONN=\"2000\" >> /etc/sysconfig/memcached
	echo CACHESIZE=\"4096\" >> /etc/sysconfig/memcached
	echo OPTIONS=\"\" >> /etc/sysconfig/memcached

	yum install php-memcache php72-php-memcache php-intl php72-php-intl nginx libjpeg-turbo-devel #quota

	systemctl start memcached
	systemctl enable memcached












	mysql_secure_installation

	yum install redis php-pecl-redis php72-php-pecl-redis

	mv /etc/redis.conf /etc/redis.conf_bak
	mv -f redis-conf /etc/redis.conf
	chown redis:root /etc/redis.conf
	mv /etc/php.d/10-opcache.ini /etc/php.d/10-opcache.ini_bak
	mv 10-opcache.ini /etc/php.d/10-opcache.ini
	chown root:root /etc/php.d/10-opcache.ini
	echo opcache.enable=1 >> /etc/php.ini
	echo opcache.enable_cli=1 >> /etc/php.ini
	echo opcache.interned_strings_buffer=8 >> /etc/php.ini
	echo opcache.max_accelerated_files=10000 >> /etc/php.ini
	echo opcache.memory_consumption=128 >> /etc/php.ini
	echo opcache.save_comments=1 >> /etc/php.ini
	echo opcache.revalidate_freq=1 >> /etc/php.ini

	usermod -s -G redis nginx
	systemctl restart php-fpm
	systemctl restart nginx
	systemctl start redis
	systemctl enable redis










	mv rainloop.conf /etc/nginx/conf.d/

	yum install daemonize
	rpm --import jcameron-key.asc

	touch /etc/yum.repos.d/webmin.repo
	echo '[Webmin]' >> /etc/yum.repos.d/webmin.repo
	echo 'name=Webmin Distribution Neutral' >> /etc/yum.repos.d/webmin.repo
	echo '#baseurl=https://download.webmin.com/download/yum' >> /etc/yum.repos.d/webmin.repo
	echo 'mirrorlist=https://download.webmin.com/download/yum/mirrorlist' >> /etc/yum.repos.d/webmin.repo
	echo 'enabled=1' >> /etc/yum.repos.d/webmin.repo


	yum install perl-Net-SSLeay perl-IO-Tty perl-Encode-Detect webmin usermin
	/sbin/chkconfig webmin on
	/sbin/chkconfig usermin on

	yum install zlib-devel libuuid-devel libmnl-devel gcc make git autoconf autogen automake pkgconfig curl jq nodejs 
	git clone https://github.com/firehol/netdata.git --depth=1
	cd netdata
	./netdata-installer.sh

	yum install psmisc
	killall netdata
	cp /home/nowadmin/netdata/system/netdata.service /etc/systemd/system
	systemctl daemon-reload
	systemctl start netdata.service
	systemctl enable netdata.service








	npm install -g redis-commander
	daemonize /usr/bin/redis-commander -p 9015

	npm install gtop -g

	echo [ntop] > /etc/yum.repos.d/ntop.repo
	echo name=ntop packages >> /etc/yum.repos.d/ntop.repo
	echo baseurl=http://www.nmon.net/centos-stable/\$releasever/\$basearch/ >> /etc/yum.repos.d/ntop.repo
	echo enabled=1 >> /etc/yum.repos.d/ntop.repo
	echo gpgcheck=1 >> /etc/yum.repos.d/ntop.repo
	echo gpgkey=http://www.nmon.net/centos-stable/RPM-GPG-KEY-deri >> /etc/yum.repos.d/ntop.repo
	echo [ntop-noarch] >> /etc/yum.repos.d/ntop.repo
	echo name=ntop packages >> /etc/yum.repos.d/ntop.repo
	echo baseurl=http://www.nmon.net/centos-stable/\$releasever/noarch/ >> /etc/yum.repos.d/ntop.repo
	echo enabled=1 >> /etc/yum.repos.d/ntop.repo
	echo gpgcheck=1 >> /etc/yum.repos.d/ntop.repo
	echo gpgkey=http://www.nmon.net/centos-stable/RPM-GPG-KEY-deri >> /etc/yum.repos.d/ntop.repo

	yum update
	yum --enablerepo=epel install ntopng
	yum --enablerepo=epel install hiredis-devel

	daemonize /bin/ntopng --disable-login 1 

	git clone https://github.com/stefanprodan/dockprom /var/www/dockprom
	cd /var/www/dockprom
	ADMIN_USER=nowadmin ADMIN_PASSWORD=\!Nmg5418 docker-compose up -d

	read -n1 -r -p "[ FINISH ]: setup with portainer âŸ¾ 9030:9090, 9096:9091, 9097:9093, 10005:3000" key








  ## ??? X2 --------v




	mv /etc/monitorix/monitorix.conf /home/nowadmin/Downloads/_monitorix.conf
	mv monitorix.conf /etc/monitorix
	systemctl start monitorix
	systemctl enable monitorix

	yum install PyQt4-devel qwt qwt-devel
	cd /var/www
	wget https://kent.dl.sourceforge.net/project/pyqwt/pyqwt5/PyQwt-5.2.0/PyQwt-5.2.0.tar.gz
	tar -xvzf PyQwt-5.2.0.tar.gz
	cd Py*/configure
	python configure.py -Q ../qwt-5.2
	make
	make install

	cd /var/www
	wget https://github.com/wolfc01/procexp/archive/master.zip
	unzip master.zip
	cd procexp-master
	./procexp.py
	echo "alias procexp='/var/www/procexp-master/procexp.py'" >> /root/.bashrc
	. /root/.bashrc
	echo "alias procexp='/var/www/procexp-master/procexp.py'" >> /home/nowadmin/.bashrc
	. /home/nowadmin/.bashrc

	cd /var/www
	git clone https://github.com/jaymzh/iptstate.git
	cd iptstate
	make
	make install
	echo "alias iptstate='/var/www/iptstate/iptstate'" >> /root/.bashrc
	. /root/.bashrc
	echo "alias iptstate='/var/www/iptstate/iptstate'" >> /home/nowadmin/.bashrc
	. /home/nowadmin/.bashrc

	cd /var/www
	git clone https://github.com/jonas/tig.git tig
	cd tig &&
	make
	make install
	echo "alias tig='/root/bin/tig'" >> /root/.bashrc
	. /root/.bashrc
	echo "alias tig='/root/bin/tig'" >> /home/nowadmin/.bashrc
	. /home/nowadmin/.bashrc

	cd /home/nowadmin/Downloads
	mv status.conf /etc/httpd/conf.d
	cd /var/www
	yum install links
	git clone https://github.com/chnm/atop.git atop
	echo "alias apachetop='/var/www/atop/atop'" >> /root/.bashrc
	. /root/.bashrc
	echo "alias apachetop='/var/www/atop/atop'" >> /home/nowadmin/.bashrc
	. /home/nowadmin/.bashrc





yum install libdvdcss gstreamer{,1}-plugins-ugly gstreamer-plugins-bad-nonfree gstreamer1-plugins-bad-freeworld libde265 x265



  ## ??? X2 --------^



????????????????????????????????????????????????????????????????????????????????? (END)











#################### DONT FORGET!! #####################################


 # Security from nowserver diagram -->

 # Backup options also -->








___________________________________________________________
###########################################################














----- MYSQL DATABASE GUIDE: ----

Named like: 

  user&db: A0007_developmentlab_io
   - Client UID_domain name
  password: 91e4daef5acfc452e5a83ed7c1ca38340c187e0cbf6eda0cb020ca2a97ef7348
   - A0007_developmentlab_io HASHED WITH UTC Unix timestamp(1591718994)(https://www.unixtimestamp.com) as salt using SHA256 @ https://hashes.org/gen.php

create database A0007_developmentlab_io;
create user 'A0007_developmentlab_io'@'localhost' identified by '91e4daef5acfc452e5a83ed7c1ca38340c187e0cbf6eda0cb020ca2a97ef7348';
grant all privileges on A0007_developmentlab_io.* to 'A0007_developmentlab_io'@'localhost';
flush privileges;






---- namecheap DNS setup instructions: ----

209.124.88.98

DNSSEC !!!
Premium DNS setup !!!






